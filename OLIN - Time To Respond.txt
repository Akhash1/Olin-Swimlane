from swimlane import Swimlane
import requests
import json
from datetime import datetime
import re
import pytz

utc=pytz.UTC
requests.packages.urllib3.disable_warnings()
now = datetime.now()

#getting inputs from swimlane
swimlane_user = sw_context.inputs['swimlane_user']
swimlane_pwd = sw_context.inputs['swimlane_pwd']
record_id = sw_context.inputs['tracking_id']
#swimlane configuration
swimlane = Swimlane(sw_context.config['InternalSwimlaneUrl'],swimlane_user,swimlane_pwd,verify_ssl=False)

# Retrieve App by name
app = swimlane.apps.get(name='Olin Case Management')

#retrive records based on record id
record_from_tracking = app.records.get(tracking_id = record_id)
assert record_from_tracking

#getting First created time of record
swimlane_first_created =record_from_tracking['Swimlane First Created']

check_time_to_respond = record_from_tracking['Time To Respond']

if check_time_to_respond is None:
  start_time = record_from_tracking['Swimlane First Created']
  naive_start_time = start_time.replace(tzinfo=None)
  Time_calculation = int((now - naive_start_time).total_seconds())
  Time_calculation_as_minute = int(Time_calculation/60)
  record_from_tracking['Time To Respond'] = Time_calculation_as_minute
  record_from_tracking.save()

#set flag value based on case type for offense Assignment 
case_type = record_from_tracking['Case Type']

if case_type == "Qradar Alert":
  record_from_tracking['Claim Status'] = "Qradar_Case_Claimed"
  record_from_tracking.save()
else:
  record_from_tracking['Claim Status'] = "Mail_or_Manual_Case_Claimed"
  record_from_tracking.save()
  